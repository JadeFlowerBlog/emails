// Generated by CoffeeScript 1.9.0
var Account, AccountConfigError, Scheduler, async, log, notifications, ramStore, _;

_ = require('lodash');

Account = require('../models/account');

AccountConfigError = require('../utils/errors').AccountConfigError;

log = require('../utils/logging')({
  prefix: 'accounts:controller'
});

async = require('async');

notifications = require('../utils/notifications');

ramStore = require('../models/store_account_and_boxes');

Scheduler = require('../processes/_scheduler');

module.exports.create = function(req, res, next) {
  var account;
  account = new Account(_.pick(req.body, Object.keys(Account.schema)));
  return async.series([
    function(cb) {
      log.debug("create#testConnections");
      return account.testConnections(cb);
    }, function(cb) {
      log.debug("create#cozy");
      return Account.create(account, function(err, created) {
        if (err) {
          return cb(err);
        }
        account = created;
        return cb(null);
      });
    }, function(cb) {
      return account.initialize(cb);
    }
  ], function(err) {
    if (err) {
      return next(err);
    }
    res.send(ramStore.getAccountClientObject(account.id));
    return Scheduler.startAccountRefresh(account.id);
  });
};

module.exports.check = function(req, res, next) {
  var tmpAccount;
  if (req.body.imapLogin) {
    req.body.login = req.body.imapLogin;
  }
  tmpAccount = new Account(_.pick(req.body, Object.keys(Account.schema)));
  return tmpAccount.testConnections(function(err) {
    if (err) {
      return next(err);
    }
    return res.send({
      check: 'ok'
    });
  });
};

module.exports.edit = function(req, res, next) {
  var accountInstance, changes, updated;
  accountInstance = ramStore.getAccount(req.params.accountID);
  changes = _.pick(req.body, Object.keys(Account.schema));
  updated = new Account(changes);
  if (!(updated.password && updated.password !== '')) {
    updated.password = accountInstance.password;
  }
  return updated.testConnections(function(err) {
    if (err) {
      return next(err);
    }
    return accountInstance.updateAttributes(changes, function(err, updated) {
      if (err) {
        return next(err);
      }
      return res.send(ramStore.getAccountClientObject(accountInstance.id));
    });
  });
};

module.exports.remove = function(req, res, next) {
  var accountInstance;
  accountInstance = ramStore.getAccount(req.params.accountID);
  return accountInstance.destroy(function(err) {
    if (err) {
      return next(err);
    }
    Scheduler.orphanRemovalDebounced();
    return res.status(204).end();
  });
};
