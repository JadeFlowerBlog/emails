// Generated by CoffeeScript 1.9.1
var ApplicationStartup, Message, OrphanRemoval, Process, async, cozydb, log, patchConversation, patchIgnored, ramStore, safeLoop,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Process = require('./_base');

OrphanRemoval = require('./orphan_removal');

patchConversation = require('../patchs/conversation');

patchIgnored = require('../patchs/ignored');

log = require('../utils/logging')({
  prefix: 'process:application_startup'
});

Message = require('../models/message');

safeLoop = require('../utils/safeloop');

ramStore = require('../models/store_account_and_boxes');

cozydb = require('cozydb');

async = require('async');

module.exports = ApplicationStartup = (function(superClass) {
  extend(ApplicationStartup, superClass);

  function ApplicationStartup() {
    return ApplicationStartup.__super__.constructor.apply(this, arguments);
  }

  ApplicationStartup.prototype.code = 'application-startup';

  ApplicationStartup.prototype.initialize = function(options, callback) {
    return async.series([this.forceCozyDBReindexing, ramStore.initialize, this.initializeNewAccounts, patchConversation.patchAllAccounts, patchIgnored.patchAllAccounts, this.removeOrphans], callback);
  };

  ApplicationStartup.prototype.forceCozyDBReindexing = function(callback) {
    log.debug("cozydbReindexing");
    return cozydb.forceReindexing(callback);
  };

  ApplicationStartup.prototype.initializeNewAccounts = function(callback) {
    log.debug("initializeNewAccounts");
    return safeLoop(ramStore.getUninitializedAccount(), function(account, next) {
      return account.initialize(next);
    }, function(errors) {
      var err, i, len, ref;
      ref = errors || [];
      for (i = 0, len = ref.length; i < len; i++) {
        err = ref[i];
        log.error('failed to init account', err);
      }
      return callback(null);
    });
  };

  ApplicationStartup.prototype.removeOrphans = function(callback) {
    var proc;
    proc = new OrphanRemoval();
    return proc.run(callback);
  };

  return ApplicationStartup;

})(Process);
